name: Release and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no actual publishing)'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Verify the tag matches the version in Cargo.toml
  verify-version:
    name: Verify Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: tag_version
      run: |
        if [[ "${{ github.ref }}" =~ ^refs/tags/v(.*)$ ]]; then
          echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
        else
          echo "version=0.0.0" >> $GITHUB_OUTPUT
        fi

    - name: Extract version from Cargo.toml
      id: cargo_version
      run: |
        VERSION=$(grep -E '^version = ' crates/insign-core/Cargo.toml | head -1 | cut -d'"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Compare versions
      id: version
      run: |
        TAG_VERSION="${{ steps.tag_version.outputs.version }}"
        CARGO_VERSION="${{ steps.cargo_version.outputs.version }}"
        
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Manual trigger - using Cargo.toml version: $CARGO_VERSION"
          echo "version=$CARGO_VERSION" >> $GITHUB_OUTPUT
        elif [[ "$TAG_VERSION" == "$CARGO_VERSION" ]]; then
          echo "Version match: $TAG_VERSION"
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Version mismatch: tag=$TAG_VERSION, Cargo.toml=$CARGO_VERSION"
          exit 1
        fi

  # Run full test suite before publishing
  test-before-release:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    needs: [verify-version]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run all tests
      run: cargo test --all --all-features --verbose

    - name: Install system dependencies for parity test
      run: |
        sudo apt-get update
        sudo apt-get install -y jq python3
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Run parity tests
      run: ./tools/scripts/parity-simple.sh

  # Build release artifacts
  build-release-artifacts:
    name: Build Release Artifacts
    needs: [verify-version, test-before-release]
    strategy:
      matrix:
        include:
          # FFI Libraries
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: libinsign_ffi.so
            artifact_type: ffi
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: insign_ffi.dll
            artifact_type: ffi
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: libinsign_ffi.dylib
            artifact_type: ffi
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: libinsign_ffi.dylib
            artifact_type: ffi
          # CLI Binaries
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: insign-cli
            artifact_type: cli
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: insign-cli.exe
            artifact_type: cli
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: insign-cli
            artifact_type: cli
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: insign-cli
            artifact_type: cli
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: release-${{ matrix.target }}-${{ matrix.artifact_type }}

    - name: Build FFI library
      if: matrix.artifact_type == 'ffi'
      run: cargo build --package insign-ffi --release --target ${{ matrix.target }}

    - name: Build CLI binary
      if: matrix.artifact_type == 'cli'
      run: cargo build --package insign-core --bin insign-cli --release --target ${{ matrix.target }}

    - name: Prepare artifact
      run: |
        mkdir -p artifacts
        if [[ "${{ matrix.artifact_type }}" == "ffi" ]]; then
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/
        else
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/
        fi

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_type }}-${{ matrix.target }}
        path: artifacts/${{ matrix.artifact_name }}

  # Build WASM packages
  build-wasm-release:
    name: Build WASM Release
    runs-on: ubuntu-latest
    needs: [verify-version, test-before-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Build WASM package (Node.js target)
      run: |
        cd crates/insign-wasm
        wasm-pack build --release --target nodejs --out-dir pkg --out-name insign

    - name: Build WASM package (Web target)
      run: |
        cd crates/insign-wasm
        wasm-pack build --release --target web --out-dir pkg-web --out-name insign

    - name: Prepare WASM artifacts
      run: |
        mkdir -p wasm-artifacts
        cp -r crates/insign-wasm/pkg wasm-artifacts/nodejs
        cp -r crates/insign-wasm/pkg-web wasm-artifacts/web

    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-release
        path: wasm-artifacts/

  # Publish to crates.io
  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [verify-version, test-before-release, build-release-artifacts, build-wasm-release]
    environment: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Publish insign-core
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          echo "DRY RUN: Would publish insign-core"
          cargo publish --package insign-core --dry-run
        else
          cargo publish --package insign-core
        fi

    - name: Wait for insign-core to be available
      if: inputs.dry_run != 'true'
      run: |
        echo "Waiting for insign-core to be available on crates.io..."
        sleep 30
        for i in {1..12}; do
          if cargo search insign-core | grep -q "${{ needs.verify-version.outputs.version }}"; then
            echo "insign-core ${{ needs.verify-version.outputs.version }} is available!"
            break
          fi
          echo "Attempt $i: insign-core not yet available, waiting..."
          sleep 30
        done

    - name: Publish insign-ffi
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          echo "DRY RUN: Would publish insign-ffi"
          cargo publish --package insign-ffi --dry-run
        else
          cargo publish --package insign-ffi
        fi

    - name: Publish insign-wasm
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          echo "DRY RUN: Would publish insign-wasm"
          cargo publish --package insign-wasm --dry-run
        else
          cargo publish --package insign-wasm
        fi

  # Create GitHub release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [verify-version, publish-crates, build-release-artifacts, build-wasm-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: release-artifacts

    - name: Generate changelog
      id: changelog
      run: |
        if [[ -f CHANGELOG.md ]]; then
          # Extract changelog for this version
          awk '/^## \['"${{ needs.verify-version.outputs.version }}"'\]/, /^## \[/ { 
            if (/^## \['"${{ needs.verify-version.outputs.version }}"'\]/) print; 
            else if (/^## \[/ && !/^## \['"${{ needs.verify-version.outputs.version }}"'\]/) exit; 
            else print 
          }' CHANGELOG.md > release-notes.md
        else
          echo "## What's Changed" > release-notes.md
          echo "" >> release-notes.md
          echo "See commit history for details." >> release-notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.verify-version.outputs.version }}
        name: Release v${{ needs.verify-version.outputs.version }}
        body_path: release-notes.md
        files: |
          release-artifacts/ffi-*/libinsign_ffi.so
          release-artifacts/ffi-*/libinsign_ffi.dylib
          release-artifacts/ffi-*/insign_ffi.dll
          release-artifacts/cli-*/insign-cli
          release-artifacts/cli-*/insign-cli.exe
        draft: false
        prerelease: ${{ contains(needs.verify-version.outputs.version, 'alpha') || contains(needs.verify-version.outputs.version, 'beta') || contains(needs.verify-version.outputs.version, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish WASM package to npm (optional)
  publish-npm:
    name: Publish WASM to npm
    runs-on: ubuntu-latest
    needs: [verify-version, build-wasm-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')
    environment: npm-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Download WASM artifacts
      uses: actions/download-artifact@v5
      with:
        name: wasm-release
        path: wasm-release

    - name: Update package.json version
      run: |
        cd wasm-release/nodejs
        npm version ${{ needs.verify-version.outputs.version }} --no-git-tag-version

    - name: Publish to npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd wasm-release/nodejs
        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          echo "DRY RUN: Would publish to npm"
          npm publish --dry-run
        else
          npm publish --access public
        fi
