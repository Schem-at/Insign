name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Test matrix across multiple platforms and Rust versions
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          # Test MSRV (Minimum Supported Rust Version)
          - os: ubuntu-latest
            rust: 1.70.0  # Adjust based on your MSRV
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build all packages
      run: cargo build --all --verbose

    - name: Run tests (default features)
      run: cargo test --all --verbose

    - name: Run tests (all features)
      run: cargo test --all --all-features --verbose

    - name: Test CLI functionality
      if: matrix.os != 'windows-latest'  # Skip on Windows due to shell differences
      run: |
        echo '{"pos": [0,0,0], "text": "@rc([0,0,0],[1,1,1])\\n#test=1"}' | \
        cargo run --bin insign-cli -- --pretty

  # Build FFI libraries for multiple platforms
  build-ffi:
    name: Build FFI (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: libinsign_ffi.so
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: insign_ffi.dll
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: libinsign_ffi.dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: libinsign_ffi.dylib

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ffi-${{ matrix.target }}

    - name: Build FFI library
      run: cargo build --package insign-ffi --release --target ${{ matrix.target }}

    - name: Upload FFI artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffi-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact }}

  # Build WASM packages
  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: wasm

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Build WASM package (Node.js target)
      run: |
        cd crates/insign-wasm
        wasm-pack build --release --target nodejs --out-dir pkg --out-name insign

    - name: Build WASM package (Web target)
      run: |
        cd crates/insign-wasm
        wasm-pack build --release --target web --out-dir pkg-web --out-name insign

    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-packages
        path: |
          crates/insign-wasm/pkg/
          crates/insign-wasm/pkg-web/

  # Run parity tests to ensure FFI and WASM produce identical outputs
  parity-test:
    name: Parity Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq python3
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Run parity tests
      run: ./tools/scripts/parity-simple.sh

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # Check documentation builds
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --all --all-features --no-deps

    - name: Check for broken links in docs
      run: |
        cargo install cargo-deadlinks
        cargo deadlinks --check-http

  # Coverage report
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload to codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: false
